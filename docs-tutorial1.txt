Introduction

This tutorial assumes RabbitMQ is installed and running on localhost on the standard port (5672). 
In case you use a different host, port or credentials, connections settings would require adjusting.

RabbitMQ is a message broker: it accepts and forwards messages. 
You can think about it as a post office: when you put the mail that you want posting in a post box, 
you can be sure that the letter carrier will eventually deliver the mail to your recipient. In this analogy, RabbitMQ is a post box, a post office, and a letter carrier.
The major difference between RabbitMQ and the post office is that it doesn't deal with paper, instead it accepts, stores, and forwards binary blobs of data â€’ messages.

RabbitMQ, and messaging in general, uses some jargon.

- Producing means nothing more than sending. A program that sends messages is a producer
- A queue is the name for a post box which lives inside RabbitMQ. 
    Although messages flow through RabbitMQ and your applications, they can only be stored inside a queue.
    A queue is only bound by the host's memory & disk limits, it's essentially a large message buffer. 
    Many producers can send messages that go to one queue, and many consumers can try to receive data from one queue.
- Consuming has a similar meaning to receiving. A consumer is a program that mostly waits to receive messages

Note that the producer, consumer, and broker do not have to reside on the same host; indeed in most applications they don't. 
An application can be both a producer and consumer, too.

Our consumer listens for messages from RabbitMQ, so unlike the publisher which publishes a single message, 
    we'll keep the consumer running to listen for messages and print them out.
